#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <math.h>

#if !defined(DOUBLE_PRECISION)
#define float_t float
#else
#define float_t double
#endif

#if defined _OPENMP
#include<omp.h>
#endif
#define NDIM 2

typedef struct kd_point_t {float_t kd_coord[NDIM];} kd_point;

typedef struct kd_node_t {
  struct kd_point_t * split;              // the splitting element
  struct kd_node_t * left, * right;       // the left and right sub-trees,
  struct kd_node_t *kid;                  // parallel MPI kid
  int axis;                               // the splitting dimenion
  int level;                              // the level / depth of the node in the tree
} kd_node;

inline void swap(struct kd_point_t *x, struct kd_point_t *y)
/*
 * Function to swap two points
 */
{
  struct kd_point_t tmp;
  tmp = *x;
  *x = *y;
  *y = tmp;
}

// Adapted from https://rosettacode.org/wiki/Quickselect_algorithm#C
struct kd_point_t * quickselect( struct kd_point_t * arr, const int N, const int ks, const int axis);
/*
 * Serial quickselect according for the array of points arr
 * whose dimension is N with respect to the direction specified by axis
 * It returns the ks-th smallest point, it also partially sorts the data.
 */

inline int choose_splitting_dimension ( const int ndim, const int axis)
/*
 * Choose the splitting dimension round-robin
 */
{
  return (axis + 1) % ndim;
}

void build_kdtree_serial(struct kd_node_t * node, struct kd_point_t *points, const int N, const int ndim, const int axis, const int level);
/*
 * Function to build a serial kd-tree, actually a ndim-tree
 * starting from the node node and the associated N points
 * axis is the previous splitting direction, level is the previous level
 */

void show_array_shared(const kd_point *data, const int start, const int end, const int level, const char c);
/*
 * Debugging function to print the array
 */

void clear_shared(struct kd_node_t *root);
/*
 * This function frees the nodes of the tree
 */

void print_tree_shared(const struct kd_node_t *node);
/*
 * Function to visualize the tree generated by node, output to be used together with python script
 */

void debug_tree_shared(const struct kd_node_t *node);
/*
 * Function to visualize the tree generated by node, mainly for debugging/checking
 */

void load_from_file_shared(int argc, char ** argv, int *N_ptr, const int  ndim, struct kd_point_t ** points_ptr);
/*
 * Read points from file to be load in the tree, filename passed in argv
 * For shared memory (serial and openmp)
 */

void generate_random_points_shared(int argc, char ** argv, int *N_ptr, const int ndim, struct kd_point_t ** points_ptr);
/*
 * Generate N random points to be load in the tree, N passed in argv
 * For shared memory (serial and openmp)
 */

#if defined _OPENMP
void build_kdtree_shared(struct kd_node_t * node, struct kd_point_t *points, int N, int ndim, int axis, int level, int threadsLeft);
/*
 * Function to build a parallel kd-tree in shared memory using OpenMP
 * starting from the node node and the associated N points
 * axis is the previous splitting direction, level is the previous level
 *
 */
#endif
